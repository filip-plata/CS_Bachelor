-- automatically generated by BNF Converter
module Main where


import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )
import Control.Monad.Except
import Control.Monad.Identity
import Control.Monad.Reader

import qualified Data.Map as Map

import LexGrammar
import ParGrammar
import PrintGrammar
import AbsGrammar

import BerlinSemantic
import TypeChecker

import ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = if v > 1 then putStrLn s else return ()

runFile :: (TypeCheck a ,Interpret a, Print a, Show a) =>
           Verbosity -> ParseFun a -> FilePath -> IO ()
runFile v p f = readFile f >>= run v p

run :: (TypeCheck a, Interpret a, Show a, Print a) =>
       Verbosity -> ParseFun a -> String -> IO ()
run v p s = let ts = myLLexer s in case p ts of
           Bad s    -> do putStrLn s
                          exitFailure
           Ok  tree -> do
                          case runTCM (evalType tree) of
                            Left e -> putStrLn (show e) >> exitFailure
                            Right ty -> putStrLn (either show
                              (\s -> show s ++ " : " ++ show ty) $
                              runInterpreter (eval tree)) >>
                              exitSuccess


showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    [] -> hGetContents stdin >>= run 2 pProgram
    "-s":fs -> mapM_ (runFile 0 pProgram) fs
    fs -> mapM_ (runFile 2 pProgram) fs
