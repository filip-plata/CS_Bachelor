

module AbsGrammar where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
newtype AlgTypeIdent = AlgTypeIdent String
  deriving (Eq, Ord, Show, Read)
newtype BIdent = BIdent String deriving (Eq, Ord, Show, Read)
newtype TypeVariable = TypeVariable String
  deriving (Eq, Ord, Show, Read)
data Constant = ConNum Numeral | ConChar Char | ConBool Boolean
  deriving (Eq, Ord, Show, Read)

data Boolean = BoolTrue | BoolFalse
  deriving (Eq, Ord, Show, Read)

data Numeral = NumInt Integer | NumComplex Complex
  deriving (Eq, Ord, Show, Read)

data Complex = IntComp Integer
  deriving (Eq, Ord, Show, Read)

data Type_specifier
    = FunType Type_specifier Type_specifier
    | ListType Type_specifier
    | IntType
    | BoolType
    | CharType
    | ComType
    | AlgType AlgTypeIdent
    | PolyType TypeVariable
  deriving (Eq, Ord, Show, Read)

data PatternExp
    = PatternExpVar BIdent
    | PatternExpl AlgTypeIdent [PatternExp]
    | PatternList PatternExp PatternExp
    | PatternListEm
    | PatternDummy
  deriving (Eq, Ord, Show, Read)

data ListExp = SListExp [HListExp]
  deriving (Eq, Ord, Show, Read)

data HListExp = SListHlp Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = LetExp [DecTer] Exp
    | CondExp Exp Exp Exp
    | MatchExp Exp [CasePattern]
    | AppExp Exp Exp
    | InfAppExp Exp BIdent Exp
    | LambdaExp BIdent Type_specifier Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | ELeEq Exp Exp
    | EGrEq Exp Exp
    | ELe Exp Exp
    | EGr Exp Exp
    | EEq Exp Exp
    | CListExp Exp Exp
    | EListExp
    | ETer ExpT
  deriving (Eq, Ord, Show, Read)

data CasePattern = TypePattern PatternExp Exp
  deriving (Eq, Ord, Show, Read)

data ExpT
    = ConExpT Constant
    | VarExpT BIdent
    | ListExpT ListExp
    | AlgExpT AlgTypeIdent
  deriving (Eq, Ord, Show, Read)

data AlgTypeConsDec = AlgTypeDec AlgTypeIdent [Type_specifier]
  deriving (Eq, Ord, Show, Read)

data Dec = DecAlgType AlgTypeIdent [AlgTypeConsDec] | DecT DecTer
  deriving (Eq, Ord, Show, Read)

data DecTer
    = DecVal BIdent Type_specifier Exp
    | DecFun BIdent [Arg] Type_specifier Exp
  deriving (Eq, Ord, Show, Read)

data Arg = ArgDef BIdent Type_specifier
  deriving (Eq, Ord, Show, Read)

data Module = Load Ident
  deriving (Eq, Ord, Show, Read)

data Program = Main [Module] [Dec] Exp
  deriving (Eq, Ord, Show, Read)

